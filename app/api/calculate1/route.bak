export async function POST(req) {
    try {
        const { divisor, modular } = await req.json();

        if (!divisor || !modular) {
            return Response.json({ error: "Missing input values" }, { status: 400 });
        }

        // Compute GCD
        const gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));
        const gcd_value = gcd(modular, divisor);
        const total_cycle = Math.floor(modular / gcd_value);

        let round = 0;
        let accumulated_value = 0;
        let remaining_from_divisor = divisor;
        let cycle = 1;
        let remainder_mod_modular = 0;
        let remaining_to_modular = 0;

        let results = [];

        while (cycle <= total_cycle) {
            round++;

            let net_gain;
            if (remainder_mod_modular > 0) {
                let gap_fill = modular - remainder_mod_modular;
                net_gain = Math.min(gap_fill, remaining_from_divisor);
                accumulated_value += net_gain;
                remaining_from_divisor -= net_gain;
                remainder_mod_modular = (remainder_mod_modular + net_gain) % modular;
                remaining_to_modular = remainder_mod_modular > 0 ? modular - remainder_mod_modular : 0;
            } else {
                net_gain = Math.min(modular, remaining_from_divisor);
                accumulated_value += net_gain;
                remaining_from_divisor -= net_gain;
                remainder_mod_modular = net_gain % modular;
                remaining_to_modular = remainder_mod_modular > 0 ? modular - remainder_mod_modular : 0;
            }

            results.push({
                round,
                cycle,
                net_gain,
                accumulated_value,
                remaining_from_divisor,
                remainder_mod_modular,
                remaining_to_modular
            });

            if (remaining_from_divisor === 0) {
                remaining_from_divisor = divisor;
                cycle++;
            }
        }

        return Response.json({ gcd_value, total_cycle, results });

    } catch (error) {
        return Response.json({ error: "Internal Server Error" }, { status: 500 });
    }
}
